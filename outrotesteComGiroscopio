#include <Wire.h>
#include <MPU6050.h>

#define led 13 //usei para saber se estava girando mais que 10 graus
#define motorap 10
#define motoran 11
#define motorbp 5
#define motorbn 6

MPU6050 mpu;

// Parâmetros do PID
float Kp = 4.5; //multiplica pelo erro
float Ki = 0.5; //acumula o erro, para que nao acumule mais, nao adianta corrigir o erro e ele ficar voltando
float Kd = 0.7; // atua na velocidade que o erro esta mudando, tentando frear tal;

float erroAnterior = 0;
float integral = 0;

// Controle de tempo com millis
unsigned long tempoAnterior = 0;
float intervalo = 100; // em milissegundos (100ms)

void setup() {
  Serial.begin(9600);
  Wire.begin();
  mpu.initialize();

  pinMode(led, OUTPUT);
  pinMode(motorap, OUTPUT);
  pinMode(motoran, OUTPUT);
  pinMode(motorbp, OUTPUT);
  pinMode(motorbn, OUTPUT);

  if (!mpu.testConnection()) {
    Serial.println("Erro: MPU6050 não conectado.");
    while (1);
  }

  Serial.println("MPU6050 pronto!");
  tempoAnterior = millis(); // inicializa controle de tempo
}

void loop() {
  unsigned long tempoAtual = millis();
  
  if ((tempoAtual - tempoAnterior) >= intervalo) { //ou seja, vamos repetir a cada 100ms
    tempoAnterior = tempoAtual;
    testempu();
  }

  // aqui pode colocar outras tarefas, se quiser
}

void testempu() {
  int16_t ax, ay, az; //variaveis do acelerometro
  int16_t gx, gy, gz; //variaveis do giroscopio

  mpu.getMotion6(&ax, &ay, &az, &gx, &gy, &gz); 

  float yaw = gz / 131.0; //yaw é um ngc da aviacao, tipo o barrel roll

  float erro = 0 - yaw;
  integral += erro * (intervalo / 1000.0);  // converte intervalo para segundos
  float derivada = (erro - erroAnterior) / (intervalo / 1000.0);
  float pid = Kp * erro + Ki * integral + Kd * derivada;
  erroAnterior = erro;

  // Limita valor do PID para evitar comportamentos extremos

  Serial.print("Yaw: ");
  Serial.print(yaw);
  Serial.print(" | PID: ");
  Serial.println(pid);

  digitalWrite(led, abs(yaw) > 10 ? HIGH : LOW);

  frenteComPID(pid);
}

void frenteComPID(float pid) {
  int basePWM = 250; // velocidade base

  int pwmEsquerdo = constrain(basePWM - pid, 0, 255); // motor esquerdo
  int pwmDireito  = constrain(basePWM + pid, 0, 250); // motor direito
  Serial.println(pwmEsquerdo);
  Serial.println(pwmDireito);
  // motor direito (motor A)
  analogWrite(motorap, 0); //como queremos sempre pra frente, esse fica 0
  analogWrite(motoran, pwmDireito); //velocidade do motor direito
  
  // motor esquerdo (motor B)
  analogWrite(motorbp, pwmEsquerdo); //velocidade do motor esquerdo
  analogWrite(motorbn, 0);
}
