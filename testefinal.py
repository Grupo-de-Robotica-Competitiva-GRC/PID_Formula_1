import RPi.GPIO as GPIO
import time

# Definição dos pinos pwm
INA=12
INB=13

# Constantes PID
Ki = 0
Kp = 135 #35
Kd = 70

P = 0
I = 0
D = 0
PID = 0
velEsq = 0
velDir = 0
erroAnterior = 0
erro = 0

# Velocidades padrão
velo = 255
aVelo = velo
bVelo = velo 


# Configuração dos sensores
sensor_pins = [5,6,16,17,22,23,24,25]

def calculaPID():
    global P, I, D, PID, erro, erroAnterior
    global velo
    if erro == 0:
        I = 0
    P = erro
    I += erro
    if I > 255:
        I = 255
    elif I < - 255:
        I = - 255
    D = erro - erroAnterior
    PID = (Kp * P) + (Ki * I) + (Kd * D)
    erroAnterior = erro

def controlaMotor():
    global velEsq, velDir
    if PID >= 0:
        velEsq = bVelo
        velDir = aVelo - PID
    else:
        velEsq = bVelo + PID
        velDir = aVelo
    
    # medo:
    cycle_l = min((abs(velEsq)/2.55), 100))
    cycle_r = min((abs(velDir)/2.55), 100))

    INA_pwm.ChangeDutyCycle(cycle_l)  # RPi.GPIO PWM usa valores de 0 a 100
    INB_pwm.ChangeDutyCycle(cycle_r)  

def calcular_erro(sensor_values):
    # 256 combinações correspondentes a média dos pesos de cada pino ativo
    # valores: pesos = [-3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5]
    # OBs: Para certos valores foi arredondado em duas casas
    erros = {
        (0, 0, 0, 0, 0, 0, 0, 0): 0,
        (1, 0, 0, 0, 0, 0, 0, 0): -3.5,
        (0, 1, 0, 0, 0, 0, 0, 0): -2.5,
        (1, 1, 0, 0, 0, 0, 0, 0): -3.0,
        (0, 0, 1, 0, 0, 0, 0, 0): -1.5,
        (1, 0, 1, 0, 0, 0, 0, 0): -2.5,
        (0, 1, 1, 0, 0, 0, 0, 0): -2.0,
        (1, 1, 1, 0, 0, 0, 0, 0): -2.5,
        (0, 0, 0, 1, 0, 0, 0, 0): -0.5,
        (1, 0, 0, 1, 0, 0, 0, 0): -2.0,
        (0, 1, 0, 1, 0, 0, 0, 0): -1.5,
        (1, 1, 0, 1, 0, 0, 0, 0): -2.17,
        (0, 0, 1, 1, 0, 0, 0, 0): -1.0,
        (1, 0, 1, 1, 0, 0, 0, 0): -1.83,
        (0, 1, 1, 1, 0, 0, 0, 0): -1.5,
        (1, 1, 1, 1, 0, 0, 0, 0): -2.0,
        (0, 0, 0, 0, 1, 0, 0, 0): 0.5,
        (1, 0, 0, 0, 1, 0, 0, 0): -1.5,
        (0, 1, 0, 0, 1, 0, 0, 0): -1.0,
        (1, 1, 0, 0, 1, 0, 0, 0): -1.83,
        (0, 0, 1, 0, 1, 0, 0, 0): -0.5,
        (1, 0, 1, 0, 1, 0, 0, 0): -1.5,
        (0, 1, 1, 0, 1, 0, 0, 0): -1.17,
        (1, 1, 1, 0, 1, 0, 0, 0): -1.75,
        (0, 0, 0, 1, 1, 0, 0, 0): 0.0,
        (1, 0, 0, 1, 1, 0, 0, 0): -1.17,
        (0, 1, 0, 1, 1, 0, 0, 0): -0.83,
        (1, 1, 0, 1, 1, 0, 0, 0): -1.5,
        (0, 0, 1, 1, 1, 0, 0, 0): -0.5,
        (1, 0, 1, 1, 1, 0, 0, 0): -1.25,
        (0, 1, 1, 1, 1, 0, 0, 0): -1.0,
        (1, 1, 1, 1, 1, 0, 0, 0): -1.5,
        (0, 0, 0, 0, 0, 1, 0, 0): 1.5,
        (1, 0, 0, 0, 0, 1, 0, 0): -1.0,
        (0, 1, 0, 0, 0, 1, 0, 0): -0.5,
        (1, 1, 0, 0, 0, 1, 0, 0): -1.5,
        (0, 0, 1, 0, 0, 1, 0, 0): 0.0,
        (1, 0, 1, 0, 0, 1, 0, 0): -1.17,
        (0, 1, 1, 0, 0, 1, 0, 0): -0.83,
        (1, 1, 1, 0, 0, 1, 0, 0): -1.5,
        (0, 0, 0, 1, 0, 1, 0, 0): 0.5,
        (1, 0, 0, 1, 0, 1, 0, 0): -0.83,
        (0, 1, 0, 1, 0, 1, 0, 0): -0.5,
        (1, 1, 0, 1, 0, 1, 0, 0): -1.25,
        (0, 0, 1, 1, 0, 1, 0, 0): -0.17,
        (1, 0, 1, 1, 0, 1, 0, 0): -1.0,
        (0, 1, 1, 1, 0, 1, 0, 0): -0.75,
        (1, 1, 1, 1, 0, 1, 0, 0): -1.3,
        (0, 0, 0, 0, 1, 1, 0, 0): 1.0,
        (1, 0, 0, 0, 1, 1, 0, 0): -0.5,
        (0, 1, 0, 0, 1, 1, 0, 0): -0.17,
        (1, 1, 0, 0, 1, 1, 0, 0): -1.0,
        (0, 0, 1, 0, 1, 1, 0, 0): 0.17,
        (1, 0, 1, 0, 1, 1, 0, 0): -0.75,
        (0, 1, 1, 0, 1, 1, 0, 0): -0.5,
        (1, 1, 1, 0, 1, 1, 0, 0): -1.1,
        (0, 0, 0, 1, 1, 1, 0, 0): 0.5,
        (1, 0, 0, 1, 1, 1, 0, 0): -0.5,
        (0, 1, 0, 1, 1, 1, 0, 0): -0.25,
        (1, 1, 0, 1, 1, 1, 0, 0): -0.9,
        (0, 0, 1, 1, 1, 1, 0, 0): 0.0,
        (1, 0, 1, 1, 1, 1, 0, 0): -0.7,
        (0, 1, 1, 1, 1, 1, 0, 0): -0.5,
        (1, 1, 1, 1, 1, 1, 0, 0): -1.0,
        (0, 0, 0, 0, 0, 0, 1, 0): 2.5,
        (1, 0, 0, 0, 0, 0, 1, 0): -0.5,
        (0, 1, 0, 0, 0, 0, 1, 0): 0.0,
        (1, 1, 0, 0, 0, 0, 1, 0): -1.17,
        (0, 0, 1, 0, 0, 0, 1, 0): 0.5,
        (1, 0, 1, 0, 0, 0, 1, 0): -0.83,
        (0, 1, 1, 0, 0, 0, 1, 0): -0.5,
        (1, 1, 1, 0, 0, 0, 1, 0): -1.25,
        (0, 0, 0, 1, 0, 0, 1, 0): 1.0,
        (1, 0, 0, 1, 0, 0, 1, 0): -0.5,
        (0, 1, 0, 1, 0, 0, 1, 0): -0.17,
        (1, 1, 0, 1, 0, 0, 1, 0): -1.0,
        (0, 0, 1, 1, 0, 0, 1, 0): 0.17,
        (1, 0, 1, 1, 0, 0, 1, 0): -0.75,
        (0, 1, 1, 1, 0, 0, 1, 0): -0.5,
        (1, 1, 1, 1, 0, 0, 1, 0): -1.1,
        (0, 0, 0, 0, 1, 0, 1, 0): 1.5,
        (1, 0, 0, 0, 1, 0, 1, 0): -0.17,
        (0, 1, 0, 0, 1, 0, 1, 0): 0.17,
        (1, 1, 0, 0, 1, 0, 1, 0): -0.75,
        (0, 0, 1, 0, 1, 0, 1, 0): 0.5,
        (1, 0, 1, 0, 1, 0, 1, 0): -0.5,
        (0, 1, 1, 0, 1, 0, 1, 0): -0.25,
        (1, 1, 1, 0, 1, 0, 1, 0): -0.9,
        (0, 0, 0, 1, 1, 0, 1, 0): 0.83,
        (1, 0, 0, 1, 1, 0, 1, 0): -0.25,
        (0, 1, 0, 1, 1, 0, 1, 0): 0.0,
        (1, 1, 0, 1, 1, 0, 1, 0): -0.7,
        (0, 0, 1, 1, 1, 0, 1, 0): 0.25,
        (1, 0, 1, 1, 1, 0, 1, 0): -0.5,
        (0, 1, 1, 1, 1, 0, 1, 0): -0.3,
        (1, 1, 1, 1, 1, 0, 1, 0): -0.83,
        (0, 0, 0, 0, 0, 1, 1, 0): 2.0,
        (1, 0, 0, 0, 0, 1, 1, 0): 0.17,
        (0, 1, 0, 0, 0, 1, 1, 0): 0.5,
        (1, 1, 0, 0, 0, 1, 1, 0): -0.5,
        (0, 0, 1, 0, 0, 1, 1, 0): 0.83,
        (1, 0, 1, 0, 0, 1, 1, 0): -0.25,
        (0, 1, 1, 0, 0, 1, 1, 0): 0.0,
        (1, 1, 1, 0, 0, 1, 1, 0): -0.7,
        (0, 0, 0, 1, 0, 1, 1, 0): 1.17,
        (1, 0, 0, 1, 0, 1, 1, 0): 0.0,
        (0, 1, 0, 1, 0, 1, 1, 0): 0.25,
        (1, 1, 0, 1, 0, 1, 1, 0): -0.5,
        (0, 0, 1, 1, 0, 1, 1, 0): 0.5,
        (1, 0, 1, 1, 0, 1, 1, 0): -0.3,
        (0, 1, 1, 1, 0, 1, 1, 0): -0.1,
        (1, 1, 1, 1, 0, 1, 1, 0): -0.67,
        (0, 0, 0, 0, 1, 1, 1, 0): 1.5,
        (1, 0, 0, 0, 1, 1, 1, 0): 0.25,
        (0, 1, 0, 0, 1, 1, 1, 0): 0.5,
        (1, 1, 0, 0, 1, 1, 1, 0): -0.3,
        (0, 0, 1, 0, 1, 1, 1, 0): 0.75,
        (1, 0, 1, 0, 1, 1, 1, 0): -0.1,
        (0, 1, 1, 0, 1, 1, 1, 0): 0.1,
        (1, 1, 1, 0, 1, 1, 1, 0): -0.5,
        (0, 0, 0, 1, 1, 1, 1, 0): 1.0,
        (1, 0, 0, 1, 1, 1, 1, 0): 0.1,
        (0, 1, 0, 1, 1, 1, 1, 0): 0.3,
        (1, 1, 0, 1, 1, 1, 1, 0): -0.33,
        (0, 0, 1, 1, 1, 1, 1, 0): 0.5,
        (1, 0, 1, 1, 1, 1, 1, 0): -0.17,
        (0, 1, 1, 1, 1, 1, 1, 0): 0.0,
        (1, 1, 1, 1, 1, 1, 1, 0): -0.5,
        (0, 0, 0, 0, 0, 0, 0, 1): 3.5,
        (1, 0, 0, 0, 0, 0, 0, 1): 0.0,
        (0, 1, 0, 0, 0, 0, 0, 1): 0.5,
        (1, 1, 0, 0, 0, 0, 0, 1): -0.83,
        (0, 0, 1, 0, 0, 0, 0, 1): 1.0,
        (1, 0, 1, 0, 0, 0, 0, 1): -0.5,
        (0, 1, 1, 0, 0, 0, 0, 1): -0.17,
        (1, 1, 1, 0, 0, 0, 0, 1): -1.0,
        (0, 0, 0, 1, 0, 0, 0, 1): 1.5,
        (1, 0, 0, 1, 0, 0, 0, 1): -0.17,
        (0, 1, 0, 1, 0, 0, 0, 1): 0.17,
        (1, 1, 0, 1, 0, 0, 0, 1): -0.75,
        (0, 0, 1, 1, 0, 0, 0, 1): 0.5,
        (1, 0, 1, 1, 0, 0, 0, 1): -0.5,
        (0, 1, 1, 1, 0, 0, 0, 1): -0.25,
        (1, 1, 1, 1, 0, 0, 0, 1): -0.9,
        (0, 0, 0, 0, 1, 0, 0, 1): 2.0,
        (1, 0, 0, 0, 1, 0, 0, 1): 0.17,
        (0, 1, 0, 0, 1, 0, 0, 1): 0.5,
        (1, 1, 0, 0, 1, 0, 0, 1): -0.5,
        (0, 0, 1, 0, 1, 0, 0, 1): 0.83,
        (1, 0, 1, 0, 1, 0, 0, 1): -0.25,
        (0, 1, 1, 0, 1, 0, 0, 1): 0.0,
        (1, 1, 1, 0, 1, 0, 0, 1): -0.7,
        (0, 0, 0, 1, 1, 0, 0, 1): 1.17,
        (1, 0, 0, 1, 1, 0, 0, 1): 0.0,
        (0, 1, 0, 1, 1, 0, 0, 1): 0.25,
        (1, 1, 0, 1, 1, 0, 0, 1): -0.5,
        (0, 0, 1, 1, 1, 0, 0, 1): 0.5,
        (1, 0, 1, 1, 1, 0, 0, 1): -0.3,
        (0, 1, 1, 1, 1, 0, 0, 1): -0.1,
        (1, 1, 1, 1, 1, 0, 0, 1): -0.67,
        (0, 0, 0, 0, 0, 1, 0, 1): 2.5,
        (1, 0, 0, 0, 0, 1, 0, 1): 0.5,
        (0, 1, 0, 0, 0, 1, 0, 1): 0.83,
        (1, 1, 0, 0, 0, 1, 0, 1): -0.25,
        (0, 0, 1, 0, 0, 1, 0, 1): 1.17,
        (1, 0, 1, 0, 0, 1, 0, 1): 0.0,
        (0, 1, 1, 0, 0, 1, 0, 1): 0.25,
        (1, 1, 1, 0, 0, 1, 0, 1): -0.5,
        (0, 0, 0, 1, 0, 1, 0, 1): 1.5,
        (1, 0, 0, 1, 0, 1, 0, 1): 0.25,
        (0, 1, 0, 1, 0, 1, 0, 1): 0.5,
        (1, 1, 0, 1, 0, 1, 0, 1): -0.3,
        (0, 0, 1, 1, 0, 1, 0, 1): 0.75,
        (1, 0, 1, 1, 0, 1, 0, 1): -0.1,
        (0, 1, 1, 1, 0, 1, 0, 1): 0.1,
        (1, 1, 1, 1, 0, 1, 0, 1): -0.5,
        (0, 0, 0, 0, 1, 1, 0, 1): 1.83,
        (1, 0, 0, 0, 1, 1, 0, 1): 0.5,
        (0, 1, 0, 0, 1, 1, 0, 1): 0.75,
        (1, 1, 0, 0, 1, 1, 0, 1): -0.1,
        (0, 0, 1, 0, 1, 1, 0, 1): 1.0,
        (1, 0, 1, 0, 1, 1, 0, 1): 0.1,
        (0, 1, 1, 0, 1, 1, 0, 1): 0.3,
        (1, 1, 1, 0, 1, 1, 0, 1): -0.33,
        (0, 0, 0, 1, 1, 1, 0, 1): 1.25,
        (1, 0, 0, 1, 1, 1, 0, 1): 0.3,
        (0, 1, 0, 1, 1, 1, 0, 1): 0.5,
        (1, 1, 0, 1, 1, 1, 0, 1): -0.17,
        (0, 0, 1, 1, 1, 1, 0, 1): 0.7,
        (1, 0, 1, 1, 1, 1, 0, 1): 0.0,
        (0, 1, 1, 1, 1, 1, 0, 1): 0.17,
        (1, 1, 1, 1, 1, 1, 0, 1): -0.36,
        (0, 0, 0, 0, 0, 0, 1, 1): 3.0,
        (1, 0, 0, 0, 0, 0, 1, 1): 0.83,
        (0, 1, 0, 0, 0, 0, 1, 1): 1.17,
        (1, 1, 0, 0, 0, 0, 1, 1): 0.0,
        (0, 0, 1, 0, 0, 0, 1, 1): 1.5,
        (1, 0, 1, 0, 0, 0, 1, 1): 0.25,
        (0, 1, 1, 0, 0, 0, 1, 1): 0.5,
        (1, 1, 1, 0, 0, 0, 1, 1): -0.3,
        (0, 0, 0, 1, 0, 0, 1, 1): 1.83,
        (1, 0, 0, 1, 0, 0, 1, 1): 0.5,
        (0, 1, 0, 1, 0, 0, 1, 1): 0.75,
        (1, 1, 0, 1, 0, 0, 1, 1): -0.1,
        (0, 0, 1, 1, 0, 0, 1, 1): 1.0,
        (1, 0, 1, 1, 0, 0, 1, 1): 0.1,
        (0, 1, 1, 1, 0, 0, 1, 1): 0.3,
        (1, 1, 1, 1, 0, 0, 1, 1): -0.33,
        (0, 0, 0, 0, 1, 0, 1, 1): 2.17,
        (1, 0, 0, 0, 1, 0, 1, 1): 0.75,
        (0, 1, 0, 0, 1, 0, 1, 1): 1.0,
        (1, 1, 0, 0, 1, 0, 1, 1): 0.1,
        (0, 0, 1, 0, 1, 0, 1, 1): 1.25,
        (1, 0, 1, 0, 1, 0, 1, 1): 0.3,
        (0, 1, 1, 0, 1, 0, 1, 1): 0.5,
        (1, 1, 1, 0, 1, 0, 1, 1): -0.17,
        (0, 0, 0, 1, 1, 0, 1, 1): 1.5,
        (1, 0, 0, 1, 1, 0, 1, 1): 0.5,
        (0, 1, 0, 1, 1, 0, 1, 1): 0.7,
        (1, 1, 0, 1, 1, 0, 1, 1): 0.0,
        (0, 0, 1, 1, 1, 0, 1, 1): 0.9,
        (1, 0, 1, 1, 1, 0, 1, 1): 0.17,
        (0, 1, 1, 1, 1, 0, 1, 1): 0.33,
        (1, 1, 1, 1, 1, 0, 1, 1): -0.21,
        (0, 0, 0, 0, 0, 1, 1, 1): 2.5,
        (1, 0, 0, 0, 0, 1, 1, 1): 1.0,
        (0, 1, 0, 0, 0, 1, 1, 1): 1.25,
        (1, 1, 0, 0, 0, 1, 1, 1): 0.3,
        (0, 0, 1, 0, 0, 1, 1, 1): 1.5,
        (1, 0, 1, 0, 0, 1, 1, 1): 0.5,
        (0, 1, 1, 0, 0, 1, 1, 1): 0.7,
        (1, 1, 1, 0, 0, 1, 1, 1): 0.0,
        (0, 0, 0, 1, 0, 1, 1, 1): 1.75,
        (1, 0, 0, 1, 0, 1, 1, 1): 0.7,
        (0, 1, 0, 1, 0, 1, 1, 1): 0.9,
        (1, 1, 0, 1, 0, 1, 1, 1): 0.17,
        (0, 0, 1, 1, 0, 1, 1, 1): 1.1,
        (1, 0, 1, 1, 0, 1, 1, 1): 0.33,
        (0, 1, 1, 1, 0, 1, 1, 1): 0.5,
        (1, 1, 1, 1, 0, 1, 1, 1): -0.07,
        (0, 0, 0, 0, 1, 1, 1, 1): 2.0,
        (1, 0, 0, 0, 1, 1, 1, 1): 0.9,
        (0, 1, 0, 0, 1, 1, 1, 1): 1.1,
        (1, 1, 0, 0, 1, 1, 1, 1): 0.33,
        (0, 0, 1, 0, 1, 1, 1, 1): 1.3,
        (1, 0, 1, 0, 1, 1, 1, 1): 0.5,
        (0, 1, 1, 0, 1, 1, 1, 1): 0.67,
        (1, 1, 1, 0, 1, 1, 1, 1): 0.07,
        (0, 0, 0, 1, 1, 1, 1, 1): 1.5,
        (1, 0, 0, 1, 1, 1, 1, 1): 0.67,
        (0, 1, 0, 1, 1, 1, 1, 1): 0.83,
        (1, 1, 0, 1, 1, 1, 1, 1): 0.21,
        (0, 0, 1, 1, 1, 1, 1, 1): 1.0,
        (1, 0, 1, 1, 1, 1, 1, 1): 0.36,
        (0, 1, 1, 1, 1, 1, 1, 1): 0.5,
        (1, 1, 1, 1, 1, 1, 1, 1): 0.0
    }

    erro_parcial = erros.get(tuple(sensor_values), 0)
    
    return erro_parcial 

def lerSensores():
    global erro
    # Cria uma lista para armazenar os valores lidos de cada sensor
    sensor_values = [0] * 8
    for i in range(8):
        # Lê o valor de cada pino (0 ou 1)
        sensor_values[i] = GPIO.input(sensor_pins[i])
    
    erro = calcular_erro(sensor_values)
    print(sensor_values)
    #print(sensor_values,erro,sep='\t')

def setup():
    # Configuração do RPi.GPIO
    GPIO.setmode(GPIO.BCM)
    
    GPIO.setup(INA,GPIO.OUT)
    GPIO.setup(INB,GPIO.OUT)

    # Configuração dos sensores 
    for pin in sensor_pins:
        GPIO.setup(pin, GPIO.IN)

def loop():
    global erro, velEsq, velDir
    try:
        while True:
            # Lê os valores dos sensores
            lerSensores()
            calculaPID()
            controlaMotor()

            # Exibe os valores
            print(f'VelEsq: {velEsq}\tVelDir: {velDir}\tKp: {Kp}\tKd: {Kd}\tKi: {Ki}')

            time.sleep(0.02)
    except KeyboardInterrupt:
        pass
    finally:
        INA_pwm.ChangeDutyCycle(0) # this prevents jitter
        INB_pwm.ChangeDutyCycle(0)
        
        #parando pwm
        INA_pwm.stop()
        INB_pwm.stop()
        
        # Limpeza dos GPIOs
        GPIO.cleanup();

if __name__ == '__main__':
    setup()
    
    # Configuração de PWM freq 1kHz
    INA_pwm = GPIO.PWM(INA,16000)
    INB_pwm = GPIO.PWM(INB,16000)
    
    INA_pwm.start(0)
    INB_pwm.start(0)
    try:
        loop()
    except KeyboardInterrupt:
        INA_pwm = GPIO.PWM(INA,16000)
        INB_pwm = GPIO.PWM(INB,16000)
    
        INA_pwm.start(0)
        INB_pwm.start(0)
        GPIO.cleanup()
        print("Programa interrompido e GPIO limpo.")
    finally:
        INA_pwm.ChangeDutyCycle(0) # this prevents jitter
        INB_pwm.ChangeDutyCycle(0)
        
        #parando pwm
        INA_pwm.stop()
        INB_pwm.stop()
        
        # Limpeza dos GPIOs
        GPIO.cleanup();
